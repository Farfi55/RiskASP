%====ADDED CONSTANT===
continent_terr("n_america",9).
continent_terr("s_america",4).
continent_terr("africa",6).
continent_terr("europe",7).
continent_terr("asia",12).
continent_terr("australia",4).

%(più o meno)BonusTroops / N di punti di invasione 
bonus_per_border("n_america",5).
bonus_per_border("s_america",5).
bonus_per_border("europe",3).
bonus_per_border("africa",4).
bonus_per_border("australia",4).
bonus_per_border("asia",3).

%=====GUESS================
curr_turn(T, P) :- 
    turn(T,P), 
    player(P),
    #max{Turn : turn(Turn,_) } = T. 

%Genera fatti truppa per la guess
troops(Z) :- 
    &int(1,Troops;Z), 
    troops_to_place_card(T, Player, Troops), 
    curr_turn(T,Player), Troops>0.

draft(T, Territory, N) | noDraft(T, Territory, N):- 
    troops_to_place_card(T, Player, _), 
    territory_control(T, Territory, Player, Troops), 
    troops(N),
    curr_turn(T,Player).

%====HARD CONSTRAINS========
:-  #sum{Troops,Territory : draft(T,Territory,Troops)} = TotalTroops, 
    troops_to_place_card(T,Player,AvailableTroops),curr_turn(T,Player), 
    TotalTroops != AvailableTroops.

:-  draft(T, Territory, N1), 
    draft(T, Territory, N2),
    curr_turn(T,_), N1!=N2.

%====CARDS DRAFT========

can_exchange(ExchangeId,Troops) :- 
    curr_turn(T,Player),
    possible_card_exchange(T, Player, ExchangeId, ExchangeTypeId, Card1, Card2, Card3, Troops),
    Troops >=6.
aux_can_exchange :- can_exchange(_,_).

max_exchange_troops(T,Player,MaxTroopsExchangeable) :- 
    curr_turn(T,Player),
    #max{Troops,ExchangeId : can_exchange(ExchangeId,Troops)} = MaxTroopsExchangeable.

exchange_cards(T,Player,ExchangeId) :- 
    curr_turn(T,Player),
    max_exchange_troops(T,Player,MaxTroopsExchangeable),
    can_exchange(ExchangeId,MaxTroopsExchangeable).

troops_to_place_card(T,Player,NewTroops) :- 
    troops_to_place(T,Player,OldTroops),
    exchange_cards(T,Player,ExchangeId), 
    can_exchange(ExchangeId,Troops),
    NewTroops = OldTroops + Troops.

troops_to_place_card(T,Player,Troops) :- 
    troops_to_place(T,Player,Troops),
    not aux_can_exchange. 

%====SUPPORT RULES=========

controlled_continent(Continent) :- 
    curr_turn(Turn,Myself), 
    continent_info(Continent, NumberOfTotalTerritories,_,_), 
    #count{OwnedTerritory : territory_control(Turn,OwnedTerritory, Myself, _),territory(OwnedTerritory, Continent)} = NumberOfOwnedTerritories,
    NumberOfOwnedTerritories == NumberOfTotalTerritories.

%tutti i miei territori minacciati(almeno stesso numero di truppe di differenza)
threatened_territory(PlayerTerritory,OpponentTerritory,TroopsDiff) :-
    curr_turn(T,Player),
    territory_control(T,PlayerTerritory,Player,PlayerTroops), 
    territory_control(T,OpponentTerritory,Opponent,OpponentTroops), 
    connection(PlayerTerritory,OpponentTerritory),
    TroopsDiff >=0,
    TroopsDiff=OpponentTroops-PlayerTroops,
    Player!=Opponent.

%ricavo i confini minacciati dei continenti che possiedi
threatened_border(PlayerTerritory,PlayerContinent,OpponentTerritory,TroopsDiff) :-
    controlled_continent(PlayerContinent),
    threatened_territory(PlayerTerritory,OpponentTerritory,TroopsDiff),
    territory(PlayerTerritory,PlayerContinent),
    territory(OpponentTerritory,OpponentContinent),
    PlayerContinent<>OpponentContinent.

% nome e continente di ogni territorio
territory_and_continent(Territory,Continent,Player) :- 
    territory_control(Turn,Territory,Player,Troops),
    territory(Territory, Continent),
    curr_turn(T,_).

% numero di territori conquistati per ogni continente
conquered_territories_for_continent(Continent,Num_Of_Conquered_Territories) :-
    continent(Continent,_),
    #count {Territory,Continent : territory_and_continent(Territory,Continent,Player), curr_turn(T,Player)}=Num_Of_Conquered_Territories.

%territorio threatened_border che è stato rinforzato
threatened_reinforced(Territory,Continent,TroopsDiff) :- 
    curr_turn(Turn,Player),
    threatened_border(Territory,Continent,_,TroopsDiff),
    draft(Turn,Territory,TroopsReinf),
    TroopsDiff - TroopsReinf < 0,
    TroopsDiff - TroopsReinf >= -2.

%rinforzo finito per tutti i territori threatened_border di un continente
threatened_reinforced_complete(Continent,Rank) :- 
    bonus_per_border(Continent,Rank),
    #count{Territory : threatened_reinforced(Territory,Continent,TroopsDiff)} = NOfTerritoriesReinforced,
    #count{Territory : threatened_border(Territory,Continent,OpponentTerr,TroopsDiff)} = NOfTerritoriesThreatened,
    NOfTerritoriesReinforced == NOfTerritoriesThreatened,
    NOfTerritoriesThreatened != 0.

%ausiliare per regola successiva
name_threatened_reinforce_complete(Continent) :- 
    threatened_reinforced_complete(Continent,_).

%peso calcolato su quanti continenti sono totalmente rinforzati(preferendo in base al rank),
%e su ogni territorio threatened_border rinforzato(in questo caso preferisco territori in difficoltà)
reinforce_border_weight(Sum) :-
    #sum{Rank,Continent : threatened_reinforced_complete(Continent,Rank)} = PartialSum,
    #sum{TroopsDiff,Territory : threatened_reinforced(Territory,Continent,TroopsDiff), not name_threatened_reinforce_complete(Continent)} = OtherPartialSum,
    Sum = PartialSum + OtherPartialSum.


continent_info(Continent,NumberOfTotalTerr,TroopsBonus, ConqRatio) :- 
    curr_turn(Turn,Player),
    continent(Continent,TroopsBonus), 
    continent_terr(Continent,NumberOfTotalTerr),
    conquered_territories_for_continent(Continent,NumOfConqueredTerritories),
    ConqRatio = NumOfConqueredTerritories*100 / NumberOfTotalTerr.


%calcolo dei territori più promettenti in base alla percentuale di conquista e al bonus per bordo di un continente
continent_rank(Continent,Rank) :- 
    continent_info(Continent,_,TroopsBonus,Rateo),
    bonus_per_border(Continent,BonusPerBorder),
    Rank = Rateo * BonusPerBorder, 
    not controlled_continent(Continent).

%utilizzato nel calcolo dei pesi
mini_continent_rank(Continent,NewRank) :- 
    continent_rank(Continent,Rank),
    NewRank = Rank / 100.

promising_continent(Continent) :- 
    continent_rank(Continent,_).


fighting_territory(Territory,OppTerritory,Continent,TroopsDiff) :-
    curr_turn(Turn,Player),
    promising_continent(Continent),
    territory_control(Turn,Territory,Player,Troops),
    territory_and_continent(Territory,Continent,Player),
    connection(Territory,OppTerritory),
    territory_control(Turn,OppTerritory,OppPlayer,OppTroops),
    territory_and_continent(OppTerritory,Continent,OppPlayer),
    Player != OppPlayer,
    Territory != OppTerritory,
    TroopsDiff = OppTroops - Troops,
    TroopsDiff >= -1.

%territorio fighting rinforzato
fighting_reinforced(Territory,Continent) :- 
    curr_turn(Turn,Player),
    fighting_territory(Territory,OppTerritory,Continent,TroopsDiff),
    draft(Turn,Territory,TroopsReinf),
    TroopsReinf < 4,
    TroopsReinf > 1.

%un continente completamente rinfornzato
fighting_reinforce_completed(Continent,Rank) :-  
    promising_continent(Continent),
    continent_rank(Continent,Rank),
    #count{Territory : fighting_reinforced(Territory,Continent)} = NOfTerritoryReinforced,
    #count{Territory : fighting_territory(Territory,OppTerritory,Continent,TroopsDiff)} = NOfFightingTerritory,
    NOfTerritoryReinforced == NOfFightingTerritory,
    NOfFightingTerritory != 0.

%ausiliare per il predicato succesivo
name_fighting_reinforce_completed(Continent) :-
    fighting_reinforce_completed(Continent,_).

%peso calcolato su quanti continenti promettenti sono completamente rinforzati(dando priorità a quelli con rank maggiore),
%e su quanti territori fighting sono rinforzati(dando priorità a quelli con il mini rank maggiore)
reinforce_fighting_weight(Sum) :-  
    #sum{Rank,Continent : fighting_reinforce_completed(Continent,Rank)} = PartialSum,
    #sum{Rank : fighting_reinforced(Territory,Continent), not name_fighting_reinforce_completed(Continent), mini_continent_rank(Continent,Rank)} = OtherPartialSum,
    Sum = PartialSum + OtherPartialSum.

%====WEAK CONSTRAINS========
:~ reinforce_border_weight(Sum). [1000-Sum@2]
:~ reinforce_fighting_weight(Sum). [10000-Sum@1]