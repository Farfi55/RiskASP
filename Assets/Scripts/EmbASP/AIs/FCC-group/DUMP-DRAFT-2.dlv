% _________________ ADDED CONSTANTS ____________________

max_continent_bonus(24).

% continent(ID, Bonus, Size, Ratio100) 
continent_size("n_america", 5, 9,  180).
continent_size("s_america", 2, 4,  200).
continent_size("africa",    3, 7,  233).
continent_size("europe",    5, 6,  120).
continent_size("asia",      7, 12, 171).
continent_size("australia", 2, 4,  200).


territory_island_internal_weight(3).
territory_island_fronteer_weight(1).
territory_island_continent_bonus_weight(10).



% ________________ BASE CONSTANTS ____________________

% continent(ID, Bonus) 

continent("n_america", 5).
continent("s_america", 2).
continent("africa",    3).
continent("europe",    5).
continent("asia",      7).
continent("australia", 2).

% territory(ID, Continent).
territory("alaska",                   "n_america").
territory("alberta",                  "n_america").
territory("central_america",          "n_america").
territory("eastern_us",               "n_america").
territory("greenland",                "n_america").
territory("northwest_territory",      "n_america").
territory("ontario",                  "n_america").
territory("quebec",                   "n_america").
territory("western_us",               "n_america").

territory("argentina",                "s_america").
territory("brazil",                   "s_america").
territory("peru",                     "s_america").
territory("venezuela",                "s_america").

territory("congo",                    "africa").
territory("east_africa",              "africa").
territory("egypt",                    "africa").
territory("madagascar",               "africa").
territory("north_africa",             "africa").
territory("south_africa",             "africa").

territory("great_britain",            "europe").
territory("iceland",                  "europe").
territory("northern_europe",          "europe").
territory("scandinavia",              "europe").
territory("southern_europe",          "europe").
territory("ukraine",                  "europe").
territory("western_europe",           "europe").

territory("afghanistan",              "asia").
territory("china",                    "asia").
territory("india",                    "asia").
territory("irkutsk",                  "asia").
territory("japan",                    "asia").
territory("kamchatka",                "asia").
territory("middle_east",              "asia").
territory("mongolia",                 "asia").
territory("siam",                     "asia").
territory("siberia",                  "asia").
territory("ural",                     "asia").
territory("yakutsk",                  "asia").

territory("eastern_australia",        "australia").
territory("indonesia",                "australia").
territory("new_guinea",               "australia").
territory("western_australia",        "australia").



connection(ID1, ID2) :- connection(ID2, ID1).


% n_america

connection("alaska",                   "northwest_territory").
connection("alaska",                   "alberta").
connection("alaska",                   "kamchatka").

connection("alberta",                  "northwest_territory").
connection("alberta",                  "ontario").
connection("alberta",                  "western_us").

connection("central_america",          "western_us").
connection("central_america",          "eastern_us").
connection("central_america",          "venezuela").

connection("eastern_us",               "ontario").
connection("eastern_us",               "quebec").
connection("eastern_us",               "western_us").

connection("greenland",                "quebec").
connection("greenland",                "ontario").
connection("greenland",                "northwest_territory").
connection("greenland",                "iceland").

connection("northwest_territory",      "ontario").
connection("northwest_territory",      "alberta").

connection("ontario",                  "quebec").
connection("ontario",                  "western_us").
connection("ontario",                  "eastern_us").

% s_america

connection("argentina",                "brazil").
connection("argentina",                "peru").

connection("brazil",                   "venezuela").
connection("brazil",                   "peru").
connection("brazil",                   "north_africa").

connection("peru",                     "venezuela").

% africa

connection("congo",                    "north_africa").
connection("congo",                    "east_africa").
connection("congo",                    "south_africa").

connection("east_africa",              "north_africa").
connection("east_africa",              "egypt").
connection("east_africa",              "middle_east").
connection("east_africa",              "madagascar").
connection("east_africa",              "south_africa").

connection("egypt",                    "north_africa").
connection("egypt",                    "middle_east").
connection("egypt",                    "southern_europe").

connection("madagascar",               "south_africa").

connection("north_africa",             "southern_europe").
connection("north_africa",             "western_europe").

% europe

connection("great_britain",           "iceland").
connection("great_britain",           "scandinavia").
connection("great_britain",           "northern_europe").
connection("great_britain",           "western_europe").

connection("iceland",                 "scandinavia").

connection("northern_europe",         "scandinavia").
connection("northern_europe",         "ukraine").
connection("northern_europe",         "southern_europe").
connection("northern_europe",         "western_europe").

connection("scandinavia",             "ukraine").

connection("southern_europe",         "ukraine").
connection("southern_europe",         "western_europe").
connection("southern_europe",         "middle_east").

connection("ukraine",                 "afghanistan").
connection("ukraine",                 "ural").
connection("ukraine",                 "middle_east").

% asia

connection("afghanistan",             "ural").
connection("afghanistan",             "china").
connection("afghanistan",             "india").
connection("afghanistan",             "middle_east").

connection("china",                   "ural").
connection("china",                   "siberia").
connection("china",                   "mongolia").
connection("china",                   "india").
connection("china",                   "siam").

connection("india",                   "middle_east").
connection("india",                   "siam").

connection("irkutsk",                 "siberia").
connection("irkutsk",                 "yakutsk").
connection("irkutsk",                 "kamchatka").
connection("irkutsk",                 "mongolia").

connection("japan",                   "kamchatka").
connection("japan",                   "mongolia").

connection("kamchatka",               "yakutsk").
connection("kamchatka",               "mongolia").

connection("monogolia",               "siberia").

connection("siam",                    "indonesia").

connection("siberia",                 "ural").
connection("siberia",                 "yakutsk").

% australia

connection("eastern_australia",       "new_guinea").
connection("eastern_australia",       "western_australia").

connection("indonesia",               "new_guinea").
connection("indonesia",               "western_australia").

connection("new_guinea",              "western_australia").



curr_turn(T, P) :- T = #max{Turn : turn(Turn,_) }, turn(T,P).

enemy(P) :- player(P), curr_turn(T, Pl), P != Pl.



friendly_territory(T, Territory, Troops) :- 
    territory_control(T, Territory, Player, Troops), curr_turn(T, Player).

enemy_territory(T, Territory, Player, Troops) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player1), Player != Player1.



adjacent_friendly_territories(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)}.

adjacent_enemy_territories(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    N = #count{T1 : 
        territory_control(T, T1, Player, _), 
        connection(Territory, T1),
        player(Player),
        PlayerOwner != Player
    }.


adjacent_enemy_player_territories(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)},
    PlayerOwner != Player.

adjacent_friendly_troops(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)}.


adjacent_enemy_troops(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


adjacent_enemy_player_troops(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


difference_troops_territory(T, Territory, PlayerOwner, Diff) :- 
    territory_control(T, Territory, PlayerOwner, Friendly),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Diff = Friendly - Enemies.

difference_troops_territory_inverted(T, Territory, PlayerOwner, Diff) :- 
    territory_control(T, Territory, PlayerOwner, Friendly),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Diff = Enemies - Friendly.

    

fronteer_territory(T, Territory, Player) :-
    adjacent_enemy_territories(T, Territory, Player, N),
    N > 0.

internal_territory(T, Territory, Player) :- 
    adjacent_enemy_territories(T, Territory, Player, N),
    N = 0.




% generare isole di territori collegarti

% territory_island(T, Id, Territory, Player).
% territory_control(T, Territory, Player, Troops).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     connection(Terr1, Terr2), 
%     territory_control(T, Terr1, Player, _), 
%     territory_control(T, Terr2, Player, _).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     territory_transitive_connection(T, Terr1, Terr3, Player),
%     territory_transitive_connection(T, Terr3, Terr2, Player).


% territory_island(T, Id, Territory, Player).

island_id(T, Id, Player) :- territory_island(T, Id, _, Player).

territory_island_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island(T, Id, Territory, Player)}.

territory_island_internal(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    internal_territory(T, Territory, Player).

territory_island_fronteer(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    fronteer_territory(T, Territory, Player).



island_with_internal_territories(T, Id, Player) :- 
    territory_island_internal(T, Id, Player, _).

island_without_internal_territories(T, Id, Player) :-
    island_id(T, Id, Player), 
    not island_with_internal_territories(T, Id, Player).

territory_island_internal_count(T, Id, Player, 0) :- 
    island_without_internal_territories(T, Id, Player).



territory_island_internal_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island_internal(T, Id, Player, Territory) }.

territory_island_fronteer_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island_fronteer(T, Id, Player, Territory) }.


% non ci sono territori di un continente che sono fuori dall'isola'

continent_not_in_island(T, Id, Player, Continent, Bonus) :-
    continent(Continent, Bonus),
    territory(Territory, Continent),
    island_id(T, Id, Player),
    not territory_island(T, Id, Territory, Player).
    

continent_in_island(T, Id, Player, Continent, Bonus) :- 
    continent(Continent, Bonus),
    island_id(T, Id, Player),
    not continent_not_in_island(T, Id, Player, Continent, Bonus).



% bigger is better
island_value(T, Id, Player, Value) :- 
    island_id(T, Id, Player),
    territory_island_internal_count(T, Id, Player, TIIC),
    territory_island_fronteer_count(T, Id, Player, TIFC),
    % max_continent_bonus(MaxContinentBonus), 
    % ContinentBonus = #sum{Bonus, Continent : continent_in_island(T, Id, Player, Continent, Bonus) },
    % constants
    territory_island_internal_weight(TIIW), 
    territory_island_fronteer_weight(TIFW),
    % territory_island_continent_bonus_weight(TICBW),
    % formula
    Value = (TIIC * TIIW) +
        (TIFC * TIFW).
        % (ContinentBonus * TICBW).

% smaller is better
island_value_index(T, Id, Player, ValueIndex) :- 
    island_value(T, Id, Player, Value),
    ValueIndex = 1000 - Value.


#show island_value/4.
% #show territory_island_internal_count/4.
% #show territory_island_fronteer_count/4.
% #show territory_island_internal_weight/1.
% #show territory_island_fronteer_weight/1.

%continent(C, P).
%territory(N, C).
%connection(N1, N2).

%player(Player)
%turn(T, Player).
%territory_control(T, Territory, Player, Troops).
%troops_to_place(T, Player, Troops).


troops(0).
troops(Troops) :- 
    troops_to_place(T, Player, MaxTroops), 
    curr_turn(T,P), 
    troops(Troops1), 
    Troops=Troops1+1, 
    Troops<=MaxTroops.

place(T, Player, Territory, Troops) | noPlace(T, Player, Territory, Troops) :- 
    territory_control(T, Territory, Player, _), 
    curr_turn(T,Player),
    troops(Troops), 
    Troops > 0.

:- place(T, P, Territory, N1), place(T, P, Territory, N2), N1!=N2.

placed_troops(T, Player, Troops) :- 
    curr_turn(T, Player), 
    Troops = #sum{N,Terr : place(T,Player,Terr,N)}.

:- troops_to_place(T,P,Troops), not placed_troops(T, P, Troops).

% al territorio T, quanti vicini amici ha? FATTO
% al territorio T, quanti vicini nemici ha? FATTO
% al territorio T, quante truppe nemiche vicine ha?
% il territorio T è un territorio di confine?
% il territorio T p un territorio di confine di un continente C?
    % quanti territori mancano a P per completare il continente C (confinante con T)?

% quanti territori mancano a P per conquistare il continente C?
% quanti territori mancano a P per c	onquistare il mondo?

% differenza di truppe 


% ==================== AI DESIGN CONSTRAINTS ====================

% place troops only in fronteer territories (can't place in internal ones)
:- place(T, Player, Territory, _), territory_island_internal(T, _, Player, Territory).




% ----------- MAX PRIORITY -----------

% place troops preferring most valutable island
:~ place(T, Player, Territory, Troops), 
    territory_island(T, Id, Territory, Player),
    island_value_index(T, Id, Player, ValueIndex).
    [ValueIndex@3, ValueIndex, Id]


% ----------- MID PRIORITY -----------
% braz(2)
% afr(5)

% diff(-3)


% prioritize territories where the difference between friendly and enemy troops is greater
:~ place(T, Player, Territory, Troops), 
    difference_troops_territory(T, Territory, PlayerOwner, Diff),
    Cost = Diff + 100.
    [Cost@2, Territory]


draft(T, Territory, N) :- place(T, _, Territory, N).

% 1. isola
% 2. n_truppe + frontiera


a(1).
:~ a(X). [1@6, X]

turn(1,"Red (Bot)").
territory_control(1,"alaska","Red (Bot)",2).
territory_control(1,"northwest_territory","Red (Bot)",4).
territory_control(1,"greenland","Blue (Bot)",1).
territory_control(1,"alberta","Blue (Bot)",1).
territory_control(1,"ontario","Red (Bot)",4).
territory_control(1,"quebec","Blue (Bot)",1).
territory_control(1,"western_us","Red (Bot)",1).
territory_control(1,"eastern_us","Red (Bot)",1).
territory_control(1,"central_america","Red (Bot)",1).
territory_control(1,"argentina","Blue (Bot)",1).
territory_control(1,"brazil","Red (Bot)",3).
territory_control(1,"peru","Blue (Bot)",4).
territory_control(1,"venezuela","Blue (Bot)",1).
territory_control(1,"congo","Red (Bot)",3).
territory_control(1,"east_africa","Red (Bot)",1).
territory_control(1,"egypt","Blue (Bot)",1).
territory_control(1,"madagascar","Red (Bot)",1).
territory_control(1,"north_africa","Blue (Bot)",2).
territory_control(1,"south_africa","Blue (Bot)",1).
territory_control(1,"great_britain","Red (Bot)",1).
territory_control(1,"iceland","Blue (Bot)",1).
territory_control(1,"northern_europe","Blue (Bot)",3).
territory_control(1,"scandinavia","Red (Bot)",1).
territory_control(1,"southern_europe","Blue (Bot)",3).
territory_control(1,"ukraine","Blue (Bot)",2).
territory_control(1,"western_europe","Blue (Bot)",1).
territory_control(1,"yakutsk","Red (Bot)",2).
territory_control(1,"ural","Red (Bot)",1).
territory_control(1,"siberia","Blue (Bot)",2).
territory_control(1,"irkutsk","Red (Bot)",4).
territory_control(1,"kamchatka","Red (Bot)",2).
territory_control(1,"afghanistan","Red (Bot)",2).
territory_control(1,"china","Red (Bot)",2).
territory_control(1,"mongolia","Blue (Bot)",2).
territory_control(1,"japan","Blue (Bot)",2).
territory_control(1,"middle_east","Red (Bot)",1).
territory_control(1,"india","Blue (Bot)",2).
territory_control(1,"siam","Red (Bot)",2).
territory_control(1,"eastern_australia","Blue (Bot)",4).
territory_control(1,"indonesia","Blue (Bot)",2).
territory_control(1,"western_australia","Red (Bot)",1).
territory_control(1,"new_guinea","Blue (Bot)",3).
territory_island(1,0,"alaska","Red (Bot)").
territory_island(1,0,"kamchatka","Red (Bot)").
territory_island(1,0,"northwest_territory","Red (Bot)").
territory_island(1,0,"yakutsk","Red (Bot)").
territory_island(1,0,"irkutsk","Red (Bot)").
territory_island(1,0,"ontario","Red (Bot)").
territory_island(1,0,"eastern_us","Red (Bot)").
territory_island(1,0,"western_us","Red (Bot)").
territory_island(1,0,"central_america","Red (Bot)").
territory_island(1,1,"greenland","Blue (Bot)").
territory_island(1,1,"quebec","Blue (Bot)").
territory_island(1,1,"iceland","Blue (Bot)").
territory_island(1,2,"alberta","Blue (Bot)").
territory_island(1,3,"argentina","Blue (Bot)").
territory_island(1,3,"peru","Blue (Bot)").
territory_island(1,3,"venezuela","Blue (Bot)").
territory_island(1,4,"brazil","Red (Bot)").
territory_island(1,5,"congo","Red (Bot)").
territory_island(1,5,"east_africa","Red (Bot)").
territory_island(1,5,"madagascar","Red (Bot)").
territory_island(1,5,"middle_east","Red (Bot)").
territory_island(1,5,"afghanistan","Red (Bot)").
territory_island(1,5,"ural","Red (Bot)").
territory_island(1,5,"china","Red (Bot)").
territory_island(1,5,"siam","Red (Bot)").
territory_island(1,6,"egypt","Blue (Bot)").
territory_island(1,6,"north_africa","Blue (Bot)").
territory_island(1,6,"southern_europe","Blue (Bot)").
territory_island(1,6,"western_europe","Blue (Bot)").
territory_island(1,6,"northern_europe","Blue (Bot)").
territory_island(1,6,"ukraine","Blue (Bot)").
territory_island(1,7,"south_africa","Blue (Bot)").
territory_island(1,8,"great_britain","Red (Bot)").
territory_island(1,8,"scandinavia","Red (Bot)").
territory_island(1,9,"siberia","Blue (Bot)").
territory_island(1,9,"mongolia","Blue (Bot)").
territory_island(1,9,"japan","Blue (Bot)").
territory_island(1,10,"india","Blue (Bot)").
territory_island(1,11,"eastern_australia","Blue (Bot)").
territory_island(1,11,"new_guinea","Blue (Bot)").
territory_island(1,11,"indonesia","Blue (Bot)").
territory_island(1,12,"western_australia","Red (Bot)").
player("Red (Bot)").
player("Blue (Bot)").
troops_to_place(1,"Red (Bot)",7).


