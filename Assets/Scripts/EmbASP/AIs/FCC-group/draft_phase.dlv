%continent(C, P).
%territory(N, C).
%connection(N1, N2).

%player(Player)
%turn(T, Player).
%territory_control(T, Territory, Player, Troops).
%troops_to_place(T, Player, Troops).


troops(0).
troops(Troops) :- 
    troops_to_place(T, Player, MaxTroops), 
    curr_turn(T,P), 
    troops(Troops1), 
    Troops=Troops1+1, 
    Troops<=MaxTroops.

place(T, Player, Territory, Troops) | noPlace(T, Player, Territory, Troops) :- 
    territory_control(T, Territory, Player, _), 
    curr_turn(T,Player),
    troops(Troops), 
    Troops > 0.

:- place(T, P, Territory, N1), place(T, P, Territory, N2), N1!=N2.

placed_troops(T, Player, Troops) :- 
    curr_turn(T, Player), 
    Troops = #sum{N,Terr : place(T,Player,Terr,N)}.

:- troops_to_place(T,P,Troops), not placed_troops(T, P, Troops).

% al territorio T, quanti vicini amici ha? FATTO
% al territorio T, quanti vicini nemici ha? FATTO
% al territorio T, quante truppe nemiche vicine ha?
% il territorio T Ã¨ un territorio di confine?
% il territorio T p un territorio di confine di un continente C?
    % quanti territori mancano a P per completare il continente C (confinante con T)?

% quanti territori mancano a P per conquistare il continente C?
% quanti territori mancano a P per c	onquistare il mondo?

% differenza di truppe 


% ==================== AI DESIGN CONSTRAINTS ====================

% place troops only in fronteer territories (can't place in internal ones)
:- place(T, Player, Territory, _), territory_island_internal(T, _, Player, Territory).

#show island_value_index/4.
#show difference_troops_territory/4.
#show place/4.
#show draft/3.

% ----------- MAX PRIORITY -----------

% place troops preferring most valutable island
:~ place(T, Player, Territory, Troops), 
    territory_island(T, Id, Territory, Player),
    island_value_index(T, Id, Player, ValueIndex).
    [ValueIndex@3, ValueIndex, Id]


% ----------- MID PRIORITY -----------
% braz(2)
% afr(5)

% diff(-3)


% prioritize territories where the difference between friendly and enemy troops is greater
:~ place(T, Player, Territory, Troops), 
    difference_troops_territory(T, Territory, PlayerOwner, Diff),
    Cost = Diff + 100.
    [Cost@2, Territory]


drafts_count(T, Player, Count) :-
    curr_turn(T, Player),
    Count = #count{Territory : place(T, Player, Territory, _)}.


% massimizzare il numero di territori diversi in cui si fa draft

% :~ troops_to_place(T, Player, MaxPlacesCount), 
%     drafts_count(T, Player, PlacesCount),
%     Cost = (MaxPlacesCount - PlacesCount) * 200.
%     [Cost@2, Cost]



draft(T, Territory, N) :- place(T, _, Territory, N).

% 1. isola
% 2. n_truppe + frontiera


a(1).
:~ a(X). [1@6, X]
