% ====================================================================
%                           DRAFT PHASE
% ====================================================================





troops_from_cards(T,Player,Troops):-
    possible_card_exchange(T, Player, ExchangeId, _, _, _, _, Troops),
    exchange_cards(T, Player, ExchangeId).

exchanged_cards(T, Player):- exchange_cards(T, Player, ExchangeId).

troops_from_cards(T,Player,0):-
    curr_turn(T, Player), not exchanged_cards(T, Player).

troops_to_place_with_cards(T, Player, MaxTroops):-
    troops_to_place(T, Player, Troops),
    troops_from_cards(T,Player,Card_Troops),
    MaxTroops = Troops + Card_Troops.

troops(0).
troops(Troops) :- 
    troops_to_place_with_cards(T, Player, MaxTroops),
    curr_turn(T,P), 
    troops(Troops1), 
    Troops=Troops1+1, 
    Troops<=MaxTroops.

place(T, Player, Territory, Troops) | noPlace(T, Player, Territory, Troops) :- 
    territory_control(T, Territory, Player, _), 
    curr_turn(T,Player),
    troops(Troops), 
    Troops > 0.
    
:- place(T, P, Territory, N1), place(T, P, Territory, N2), N1!=N2.

placed_troops(T, Player, Troops) :- 
    curr_turn(T, Player), 
    Troops = #sum{N,Terr : place(T,Player,Terr,N)}.

:- troops_to_place_with_cards(T,P,Troops), not placed_troops(T, P, Troops).

% al territorio T, quanti vicini amici ha? FATTO
% al territorio T, quanti vicini nemici ha? FATTO
% al territorio T, quante truppe nemiche vicine ha?
% il territorio T Ã¨ un territorio di confine?
% il territorio T p un territorio di confine di un continente C?
    % quanti territori mancano a P per completare il continente C (confinante con T)?

% quanti territori mancano a P per conquistare il continente C?
% quanti territori mancano a P per conquistare il mondo?

% differenza di truppe 

%quanto migliora la condizione di un paese piazzandogli delle truppe?

territory_good_index(T, Territory, Index) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Troops > Enemies,
    Index = Troops - Enemies.

territory_bad_index(T, Territory, Index) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Troops <= Enemies,
    Index = Enemies - Troops.

territory_good_index_projection(T, Territory, Value) :- 
    territory_good_index(T, Territory, Index),
    territory_index_good_strong_weight(W), 
    curr_turn(T, Player),
    place(T, Player, Territory, Troops),
    Index + Troops < 4, 
    Value = (Index + Troops) * W.

territory_good_index_projection(T, Territory, Value) :- 
    territory_good_index(T, Territory, Index),
    territory_index_good_weak_weight(W),
    curr_turn(T, Player),
    place(T, Player, Territory, Troops),
    Index + Troops > 3, 
    Value = (Index + Troops) * W.

territory_good_index_projection(T, Territory, Value) :- 
    territory_bad_index(T, Territory, Index),
    place(T, Player, Territory, Troops), 
    curr_turn(T, Player),
    Troops > Index, 
    Troops - Index < 4,
    territory_index_bad_strong_weight(W),
    Value = (Troops - Index) * W.
    
territory_good_index_projection(T, Territory, Value) :- 
    territory_bad_index(T, Territory, Index),
    place(T, Player, Territory, Troops), 
    curr_turn(T, Player),
    Troops = Index,
    territory_index_bad_strong_weight(W),
    Value = (Troops) * W.

territory_bad_index_projection(T, Territory, Value) :- 
    territory_bad_index(T, Territory, Index),
    place(T, Player, Territory, Troops), 
    curr_turn(T, Player),
    Troops < Index,
    territory_index_bad_weak_weight(W),
    Value = ( Index - Troops) * W.


island_good_index(T, Id, Index) :- 
    curr_turn(T, Player), 
    island_id(T, Id, Player),
    #sum{Value, Territory : territory_good_index_projection(T, Territory, Value)} = Index.

island_bad_index(T, Index) :- 
    curr_turn(T, Player), 
    #sum{Value, Territory : territory_bad_index_projection(T, Territory, Value)} = Index.

:~ island_good_index(T, Id, Index), Val = 10000-Index. [Val@3, Val]

:~ island_bad_index(T, Index). [Index@2, Index]

% ==================== AI DESIGN CONSTRAINTS ====================

% place troops only in fronteer territories (can't place in internal ones)
:- place(T, Player, Territory, _), territory_island_internal(T, _, Player, Territory).


% ----------- MAX PRIORITY -----------

% place troops preferring most valutable island
:~ place(T, Player, Territory, Troops), 
    territory_island(T, Id, Territory, Player),
    island_value_index(T, Id, Player, ValueIndex).
    [ValueIndex@3, ValueIndex, Id]


% ----------- MID PRIORITY -----------



% prioritize territories where the difference between friendly and enemy troops is greater
% :~ place(T, Player, Territory, Troops), 
%    difference_troops_territory(T, Territory, PlayerOwner, Diff),
%    Cost = Diff + 100.
%    [Cost@2, Territory]


drafts_count(T, Player, Count) :-
    curr_turn(T, Player),
    Count = #count{Territory : place(T, Player, Territory, _)}.


% massimizzare il numero di territori diversi in cui si fa draft

:~ troops_to_place_with_cards(T, Player, MaxPlacesCount), 
     drafts_count(T, Player, PlacesCount),
     Cost = (MaxPlacesCount - PlacesCount) * 150.
     [Cost@2, Cost]



draft(T, Territory, N) :- place(T, _, Territory, N).

% 1. isola
% 2. n_truppe + frontiera

