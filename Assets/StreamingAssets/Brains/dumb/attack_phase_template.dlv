% ====================================================================
%                           ATTACK PHASE
% ====================================================================

curr_attack_turn(T, AT, P) :- curr_turn(T,P), AT = #max{AT1 : attack_turn(T, AT1, P) }.


curr_turn(T, P) :- T = #max{Turn : turn(Turn,_) }, turn(T,P).


% current player, the one that is playing and making decisions
curr_player(P) :- curr_turn(_, P).

% all other players, can be viewed as the opponents
other_player(P) :- player(P), curr_player(CP), P != CP.



curr_player_territory(T, Territory, Troops) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player).

other_player_territory(T, Territory, Player, Troops) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player1), Player != Player1.


% ====================================================================
%                          ATTACK REINFORCE LOGIC
% ====================================================================

% won_territory(T, AT, Player, Territory).

% attack_result(T, AT, From, To, RemainingAttackerTroops, RemainingTroopsDefender, 
%     AttackingTroops, DefendingTroops, MinReinforcementsTroops).


last_attack_result(T, PrecAT, From, To, RemAttTroops, RemDefTroops, AttTroops, DefTroops, MinReinfTroops) :-
    attack_result(T, PrecAT, From, To, RemAttTroops, RemDefTroops, AttTroops, DefTroops, MinReinfTroops),
    curr_attack_turn(T, AT, _),
    PrecAT = AT - 1.

last_attack_result_simple(T, AT, From, To, RemAttTroops, RemDefTroops) :-
    last_attack_result(T, AT, From, To, RemAttTroops, RemDefTroops, _, _, _).

has_to_reinforce(T, AT, From, To) :- 
    curr_attack_turn(T, AT, Player),
    last_attack_result(T, PrecAT, From, To, _, 0, _, _, _),
    PrecAT = AT - 1.

has_to_reinforce_any(T, AT) :- has_to_reinforce(T, AT, _, _).


attack_reinforce_possible_troops(T, AT, From, To, AvailableTroops) :- 
    has_to_reinforce(T, AT, From, To),
    territory_control(T, From, _, FromTroops),
    AvailableTroops=FromTroops-1.


attack_reinforce_possible_troops(T, AT, From, To, Troops) :- 
    attack_reinforce_possible_troops(T, AT, From, To, Troops1),
    last_attack_result(T, PrecAT, From, To, _, _, _, _, MinReinfTroops),
    PrecAT = AT - 1,
    Troops = Troops1 - 1,
    Troops >= MinReinfTroops.


attack_reinforce(T, AT, From, To, Troops) :- 
    has_to_reinforce(T, AT, From, To),
    Troops= #max{Troops1 : attack_reinforce_possible_troops(T, AT, From, To, Troops1)}.


% ====================================================================
%                          ATTACK LOGIC
% ====================================================================


can_attack(T, AT) :- curr_attack_turn(T, AT, _), not has_to_reinforce_any(T, AT).

troops_for_attack(T, Territory, 1) :- 
    curr_player_territory(T, Territory, Troops), Troops > 1.

    
troops_for_attack(T, Territory, Troops) :- 
    troops_for_attack(T, Territory, Troops1),
    curr_player_territory(T, Territory, MaxTroops), 
    Troops = Troops1 +1, 
    Troops < MaxTroops, 
    Troops <= 3.


{ attack(T, AT, TerritoryFrom, TerritoryTo, Troops) } <= 1 :- 
    can_attack(T, AT),
    curr_player_territory(T, TerritoryFrom, _),
    other_player_territory(T, TerritoryTo, PTo, _),
    connection(TerritoryFrom, TerritoryTo),
    Troops = #max{Troops1 : troops_for_attack(T, TerritoryFrom, Troops1)},
    Troops >= 1.


:- has_attacked(T, AT), 1 != #count{TerritoryFrom, TerritoryTo, Troops : attack(T, AT, TerritoryFrom, TerritoryTo, Troops)}.

has_attacked(T, AT) :- attack(T, AT, _, _, _).


end_attack(T, AT) :- can_attack(T, AT), not has_attacked(T, AT).


% won_territories_count(T, Count) :-
%     curr_turn(T, P),
%     Count = #count{Territory : won_territory(T, _, P, Territory)}.
 
% alternative
won_territories_count(T, Count) :-
    curr_turn(T, P),
    Count = #count{Territory : attack_result(T, _, _, Territory, _, 0, _, _, _)}.

has_won_territory(T, AT) :- 
    curr_attack_turn(T, AT, P),
    won_territories_count(T, Count),
    Count > 0.

% TODO: dumb way to ensure that the player ends the attack phase
%       after winning a territory
end_attack(T, AT) :- has_won_territory(T, AT), can_attack(T, AT).

:~ end_attack(T, AT), not has_won_territory(T, AT). [10@2]

#show attack_reinforce/5.
#show has_to_reinforce/4.
#show attack/5.
#show end_attack/2.

% has_attacked_on_turn(T, AT) :- attack(T, AT, _, _, _).

% has_attacked_or_ended_on_turn(T, AT) :- has_attacked_on_turn(T, AT).
% has_attacked_or_ended_on_turn(T, AT) :- end_attack(T, AT).

% :- attack_reinforce(T, AT, _, _, _), 
%     not has_attacked_or_ended_on_turn(T, NextAT),
%     NextAT=AT+1.


%{ attack(T,AT,From1,To1,Troops1), end_attack(T,AT), attack_reinforce(T,AT,From2,To2,Troops2) } = 1 :- 

