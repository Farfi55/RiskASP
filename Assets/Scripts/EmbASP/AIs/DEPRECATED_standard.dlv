% -----------------------------------------------------------

% turn(Turn, IDPlayer)

% territory_control(Turn, ID, IDPlayer, NArmies)



has_territory_in_continent(Turn, IDPlayer, Continent) :- 
    territory(ID, Continent),
    territory_control(Turn, ID, IDPlayer, _).


no_territory_in_continent(Turn, IDPlayer, Continent) :- 
    turn(Turn, _),
    player(IDPlayer),
    continent(Continent,_),
    not has_territory_in_continent(Turn, IDPlayer, Continent).

owns_continent(Turn, IDPlayer, Continent) :- 
    has_territory_in_continent(Turn, IDPlayer, Continent),
    not no_territory_in_continent(Turn, IDPlayer, Continent).



% turn(Turn, IDPlayer)
n_territories(Turn, IDPlayer, N) :- 
    turn(Turn, _),
    player(IDPlayer),
    N = #count{ID : territory_control(Turn, ID, IDPlayer, _)}.


troops_from_territories(Turn, IDPlayer, N) :- 
    n_territories(Turn, IDPlayer, N1),
    N = N1 / 3.

troops_from_continent(Turn, IDPlayer, Continent, N) :- 
    owns_continent(Turn, IDPlayer, Continent),
    continent(Continent, N).

troops_from_continents(Turn, IDPlayer, N) :- 
    turn(Turn, _),
    player(IDPlayer),
    N = #sum{N1, Continent : troops_from_continent(Turn, IDPlayer, Continent, N1)}.




% how many enemy territories are adjacent to a territory



% == == ==  PHASE 1: REINFORCEMENT  == == ==

% units_to_place(Turn, IDPlayer, N).


possible_NArmies(Turn, IDPlayer, 1) :- turn(Turn,IDPlayer).
possible_NArmies(Turn, IDPlayer, N) :-
    possible_NArmies(Turn, IDPlayer, N1),
    units_to_place(Turn, IDPlayer, Max),
    N = N1 + 1,
    N <= Max.
    


% GUESS
place(Turn, IDPlayer, IDTerritory, NArmies) | dont_place(Turn, IDPlayer, IDTerritory, NArmies) :-
    turn(Turn, IDPlayer),
    territory(IDTerritory,_),
    units_to_place(Turn, IDPlayer, Max),
    possible_NArmies(Turn, IDPlayer, NArmies).



territory_control_1(Turn, IDTerritory, IDPlayer) :- 
    territory_control(Turn, IDTerritory, IDPlayer, _).

% CHECK
:- place(Turn, IDPlayer, IDTerritory, NArmies), not territory_control_1(Turn, IDTerritory, IDPlayer).


units_placed(Turn, IDPlayer, NArmies) :- 
    units_to_place(Turn, IDPlayer, NArmies),
    #sum{N, IDTerritory : place(Turn, IDPlayer, IDTerritory, N)}=NArmies.

% every unit was placed in a territory
:- units_placed(Turn, IDPlayer, NArmies), 
    not units_to_place(Turn, IDPlayer, NArmies). 

% OPTIMIZE



% == == ==  PHASE 2: ATTACK  == == ==




% INPUT FROM GAME
% next_attack_number(Turn, NAttack)
% attack_result(Turn, NAttack, FromID, ToID, RemainingAttackingArmies, RemainingDefendingArmies)

% OUTPUT TO GAME

% attack(Turn, NAttack, FromID, ToID, NArmies)
% after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies)
% stop_attacking(Turn, AttackTurn)


% NArmies: [1,2,3] 
% NAttack: from 1 to N in a single round 
% attack(Turn, NAttack, FromID, ToID, NArmies)

attack_turn(Turn, AttackTurn, IDPlayer) :- 
    turn(Turn, IDPlayer),
    AttackTurn = #max{N : next_attack_number(Turn, N)}.


n_attacking_armies(1..3).   % number of armies which you can use to attack

% decides to attack or not a territory with a certain amount of troops
attack(Turn, AttackTurn, FromID, ToID, NArmies) | dont_attack(Turn, AttackTurn, FromID, ToID, NArmies) :-
    attack_turn(Turn, AttackTurn, IDPlayer),
    connection(FromID, ToID),
    available_troops(Turn, AttackTurn, IDPlayer, FromID, Max),
    n_attacking_armies(NArmies),
    NArmies <= Max.

% same as territory_control at the beginning of the turn
% changes with every attack
% the territory controll at the AttackTurn
% territory_control_ATK(Turn, AttackTurn, IDTerritory, IDPlayer, NArmies).
territory_control_ATK(Turn, 1, IDTerritory, IDPlayer, NArmies) :- 
    territory_control(Turn, IDTerritory, IDPlayer, NArmies).


% without NArmies
territory_control_ATK_1(Turn, AttackTurn, IDTerritory, IDPlayer) :- 
    territory_control_ATK(Turn, AttackTurn, IDTerritory, IDPlayer, _).


% derives the number of troops that can be used in an attack
available_troops(Turn, AttackTurn, IDTerritory, IDPlayer, NArmies-1) :- 
    territory_control_ATK(Turn, AttackTurn, IDTerritory, IDPlayer, NArmies).


% checks that the territory from with we attack is controlled by the player
:- attack(Turn, AttackTurn, FromID, _, _), 
    attack_turn(Turn, AttackTurn, IDPlayer),
    not territory_control_ATK_1(Turn, AttackTurn, FromID, IDPlayer).

% checks that the territory we attack is not controlled by the player
:- attack(Turn, AttackTurn, _, ToID, _), 
    attack_turn(Turn, AttackTurn, IDPlayer),
    territory_control_ATK_1(Turn, AttackTurn, TOID, IDPlayer).

% checks that we have enough troops to attack
:- attack(Turn, AttackTurn, FromID, _, NArmies), 
    attack_turn(Turn, AttackTurn, IDPlayer),
    available_troops(Turn, IDPlayer, FromID, Max),
    NArmies > Max.
    

% max one attack per AttackTurn
:- attack_turn(Turn, AttackTurn, IDPlayer),
    1 > #count{FromID, ToID, NArmies : attack(Turn, AttackTurn, FromID, ToID, NArmies)}.


attacked(Turn, AttackTurn) :- attack(Turn, AttackTurn, _, _, _).

% we can stop attacking only if we havent attacked
stop_attacking(Turn, AttackTurn) :- attack_turn(Turn,AttackTurn,_), not attacked(Turn, AttackTurn).


% attack_result(Turn, NAttack, FromID, ToID, RemainingAttackingArmies, RemainingDefendingArmies)


won_control(Turn, AttackTurn, FromID, ToID) :- 
    attack_result(Turn, AttackTurn, FromID, ToID, _, 0).

% after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies)
% available_troops(Turn, AttackTurn, IDTerritory, IDPlayer, NArmies).

% after an attack, where the attacker won the control over a territory,
% he has to move some troops to the new territory
% MAX: available troops in the territory from which we attack
% MIN: the minimum between:
%        1. the troops that we used to attack and the
%        2. the remaining troops after the attack
%n_troops_to_move(Turn, AttackTurn, FromID, N).
n_troops_to_move(Turn, AttackTurn, FromID, 1) :- won_control(Turn, AttackTurn, FromID, _).
n_troops_to_move(Turn, AttackTurn, FromID, N) :-
    n_troops_to_move(Turn, AttackTurn, FromID, N1),
    available_troops(Turn, AttackTurn, FromID, IDPlayer, Max),
    N = N1 + 1,
    N <= Max.



after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies) | 
dont_after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies) :-
    won_control(Turn, AttackTurn, FromID, ToID),
    attack(Turn, AttackTurn-1, FromID, ToID, Min),
    n_troops_to_move(Turn, AttackTurn, FromID, NArmies).


% check that we have only moved once
:- won_control(Turn, AttackTurn, _, _),
    1 != #count{FromID, ToID, NArmies : after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies)}.

% number of troops used in the attack
possible_min_troops_to_move(Turn, AttackTurn, FromID, ToID, NArmies) :- 
    attack(Turn, AttackTurn, FromID, ToID, NArmies), 
    won_control(Turn, AttackTurn, FromID, ToID).

% number of troops remaining after the attack
possible_min_troops_to_move(Turn, AttackTurn, FromID, ToID, NArmies) :- 
    available_troops(Turn, AttackTurn, FromID, _, NArmies),
    won_control(Turn, AttackTurn, FromID, ToID).

% min number of troops to move between 
%   the number of troops used in the attack
%   the number of troops remaining after the attack
min_troops_to_move(Turn, AttackTurn, FromID, ToID, Min) :-
    won_control(Turn, AttackTurn, FromID, ToID),
    Min = #min{N : possible_min_troops_to_move(Turn, AttackTurn, FromID, ToID, N)}.

% make sure the number of troops to move is at least the minimum
:- after_attack_move(Turn, AttackTurn, FromID, ToID, NArmies),
    min_troops_to_move(Turn, AttackTurn, FromID, ToID, Min),
    NArmies < Min.






% == == ==  PHASE 3: FORTIFICATION  == == ==


