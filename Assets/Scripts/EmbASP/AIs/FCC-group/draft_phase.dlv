%continent(C, P).
%territory(N, C).
%connection(N1, N2).

%player(Player)
%turn(T, Player).
%territory_control(T, Territory, Player, Troops).
%troops_to_place(T, Player, Troops).
curr_turn(T, P) :- T = #max{Turn : turn(Turn,_) }, turn(T,P).

enemy(P) :- player(P), curr_turn(T, Pl), P != Pl.

troops(0).
troops(N) :- troops_to_place(T, Player, Troops), 
    current_turn(T,P), 
    troops(F), 
    N=F+1, 
    N<=Troops.

place(T, Player, Territory, N) | noPlace(T, Player, Territory, N) :- 
    troops_to_place(T, Player, _),
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T,Player),
    troops(N), 
    N>0.

:- place(T, P, Territory, N1), place(T, P, Territory, N2), N1!=N2.

:- troops_to_place(T,P,Troops), #sum{N,Terr : place(T,P,Terr,N)} <> Troops.
%% :- place(_,_,_,D), D>4.



friendly_territory(T, Territory, Troops) :- 
    territory_control(T, Territory, Player, Troops), curr_turn(T, Player).

enemy_territory(T, Territory, Player, Troops) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player1), Player != Player1.



adjacent_friendly_territories(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)}.

adjacent_enemy_territories(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)},
    PlayerOwner != Player.

adjacent_enemy_player_territories(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)},
    PlayerOwner != Player.


adjacent_friendly_troops(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)}.


adjacent_enemy_troops(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


adjacent_enemy_player_troops(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


difference_troops_territory(T, Territory, PlayerOwner, Diff) :- 
    territory_control(T, Territory PlayerOwner, Friendly),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Diff = Friendly - Enemies.

fronteer_territory(T, Territory, Player) :-
    adjacent_enemy_territories(T, Territory, Player, N),
    N > 0.

internal_territory(T, Territory, Player) :- 
    adjacent_enemy_territories(T, Territory, Player, N),
    N = 0.


% generare isole di territori collegarti

% territory_island(T, Id, Territory, Player).
% territory_control(T, Territory, Player, Troops).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     connection(Terr1, Terr2), 
%     territory_control(T, Terr1, Player, _), 
%     territory_control(T, Terr2, Player, _).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     territory_transitive_connection(T, Terr1, Terr3, Player),
%     territory_transitive_connection(T, Terr3, Terr2, Player).


% territory_island(T, Id, Territory, Player).

island_id(T, Id, Player) :- territory_island(T, Id, _, Player).

territory_island_count(T, Id, Player, Count) :- 
    territory_island(T, Id, _, Player),
    Count = #count{Territory : territory_island(T, Id, Territory, Player)}.

territory_island_internal(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    internal_territory(T, Territory, Player).

territory_island_fronteer(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    fronteer_territory(T, Territory, Player).



territory_island_internal_count(T, Id, Player, Count) :- 
    territory_island(T, Id, Player, _),
    Count = #count{Territory : territory_island_internal(T, Id, Player, Territory) }.

territory_island_fronteer_count(T, Id, Player, Count) :- 
    territory_island(T, Id, Player, _),
    Count = #count{Territory : territory_island_fronteer(T, Id, Player, Territory) }.



% non ci sono territori di un continente che sono fuori dall'isola'

continent_not_in_island(T, Id, Player, Continent, Bonus) :-
    continent(Continent, Bonus),
    territory(Territory, Continent),
    island_id(T, Id, Player),
    not territory_island(T, Id, Territory, Player).
    

continent_in_island(T, Id, Player, Continent, Bonus) :- 
    continent(Continent, Bonus),
    island_id(T, Id, Player),
    not continent_not_in_island(T, Id, Player, Continent, Bonus).



% bigger is better
island_value(T, Id, Player, Value) :- 
    island_id(T, Id, Player),
    TIIC = territory_island_internal_count(T, Id, Player, Count),
    TIFC = territory_island_fronteer_count(T, Id, Player, Count),
    max_continent_bonus(MaxContinentBonus), 
    % constants
    territory_island_internal_weight(TIIW), 
    territory_island_fronteer_weight(TIFW),
    territory_island_continent_bonus_weight(TICBW),
    ContinentBonus = #sum{Bonus, Continent : continent_in_island(T, Id, Player, Continent, Bonus) },
    % formula
    Value = (TIIC * TIIW) +
        (TIFC * TIFW) +
        (ContinentBonus * TICBW).

% smaller is better
island_value_index(T, Id, Player, ValueIndex) :- 
    island_value(T, Id, Player, Value),
    ValueIndex = 1000 - Value.



:- place(T, Player, Territory, _), territory_island_internal(T, _, Player, Territory) 



% al territorio T, quanti vicini amici ha? FATTO
% al territorio T, quanti vicini nemici ha? FATTO
% al territorio T, quante truppe nemiche vicine ha?
% il territorio T Ã¨ un territorio di confine?
% il territorio T p un territorio di confine di un continente C?
    % quanti territori mancano a P per completare il continente C (confinante con T)?

% quanti territori mancano a P per conquistare il continente C?
% quanti territori mancano a P per c	onquistare il mondo?

% differenza di truppe 




draft(T, Territory, N):- place(T, _, Territory, N).
