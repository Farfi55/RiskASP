curr_turn(T, P) :- T = #max{Turn : turn(Turn,_) }, turn(T,P).

enemy(P) :- player(P), curr_turn(T, Pl), P != Pl.



friendly_territory(T, Territory, Troops) :- 
    territory_control(T, Territory, Player, Troops), curr_turn(T, Player).

enemy_territory(T, Territory, Player, Troops) :- 
    territory_control(T, Territory, Player, Troops), 
    curr_turn(T, Player1), Player != Player1.



adjacent_friendly_territories(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)}.

adjacent_enemy_territories(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    N = #count{T1 : 
        territory_control(T, T1, Player, _), 
        connection(Territory, T1),
        player(Player),
        PlayerOwner != Player
    }.


adjacent_enemy_player_territories(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #count{T1 : territory_control(T, T1, Player, _), connection(Territory, T1)},
    PlayerOwner != Player.

adjacent_friendly_troops(T, Territory, Player, N) :- 
    territory_control(T, Territory, Player, _),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)}.


adjacent_enemy_troops(T, Territory, PlayerOwner, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


adjacent_enemy_player_troops(T, Territory, PlayerOwner, Player, N) :- 
    territory_control(T, Territory, PlayerOwner, _),
    player(Player),
    N = #sum{Troops, T1 : territory_control(T, T1, Player, Troops), connection(Territory, T1)},
    PlayerOwner != Player.


difference_troops_territory(T, Territory, PlayerOwner, Diff) :- 
    territory_control(T, Territory, PlayerOwner, Friendly),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Diff = Friendly - Enemies.

difference_troops_territory_inverted(T, Territory, PlayerOwner, Diff) :- 
    territory_control(T, Territory, PlayerOwner, Friendly),
    adjacent_enemy_troops(T, Territory, PlayerOwner, Enemies),
    Diff = Enemies - Friendly.

    

fronteer_territory(T, Territory, Player) :-
    adjacent_enemy_territories(T, Territory, Player, N),
    N > 0.

internal_territory(T, Territory, Player) :- 
    adjacent_enemy_territories(T, Territory, Player, N),
    N = 0.




% generare isole di territori collegarti

% territory_island(T, Id, Territory, Player).
% territory_control(T, Territory, Player, Troops).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     connection(Terr1, Terr2), 
%     territory_control(T, Terr1, Player, _), 
%     territory_control(T, Terr2, Player, _).

% territory_transitive_connection(T, Terr1, Terr2, Player) :- 
%     territory_transitive_connection(T, Terr1, Terr3, Player),
%     territory_transitive_connection(T, Terr3, Terr2, Player).


% territory_island(T, Id, Territory, Player).

island_id(T, Id, Player) :- territory_island(T, Id, _, Player).

territory_island_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island(T, Id, Territory, Player)}.

territory_island_internal(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    internal_territory(T, Territory, Player).

territory_island_fronteer(T, Id, Player, Territory) :- 
    territory_island(T, Id, Territory, Player), 
    fronteer_territory(T, Territory, Player).



island_with_internal_territories(T, Id, Player) :- 
    territory_island_internal(T, Id, Player, _).

island_without_internal_territories(T, Id, Player) :-
    island_id(T, Id, Player), 
    not island_with_internal_territories(T, Id, Player).

territory_island_internal_count(T, Id, Player, 0) :- 
    island_without_internal_territories(T, Id, Player).



territory_island_internal_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island_internal(T, Id, Player, Territory) }.

territory_island_fronteer_count(T, Id, Player, Count) :- 
    island_id(T, Id, Player),
    Count = #count{Territory : territory_island_fronteer(T, Id, Player, Territory) }.


% non ci sono territori di un continente che sono fuori dall'isola'

continent_not_in_island(T, Id, Player, Continent, Bonus) :-
    continent(Continent, Bonus),
    territory(Territory, Continent),
    island_id(T, Id, Player),
    not territory_island(T, Id, Territory, Player).
    

continent_in_island(T, Id, Player, Continent, Bonus) :- 
    continent(Continent, Bonus),
    island_id(T, Id, Player),
    not continent_not_in_island(T, Id, Player, Continent, Bonus).



% bigger is better
island_value(T, Id, Player, Value) :- 
    island_id(T, Id, Player),
    territory_island_internal_count(T, Id, Player, TIIC),
    territory_island_fronteer_count(T, Id, Player, TIFC),
    % max_continent_bonus(MaxContinentBonus), 
    ContinentBonus = #sum{Bonus, Continent : continent_in_island(T, Id, Player, Continent, Bonus) },
    % constants
    territory_island_internal_weight(TIIW), 
    territory_island_fronteer_weight(TIFW),
    territory_island_continent_bonus_weight(TICBW),
    % formula
    Value = (TIIC * TIIW) +
        (TIFC * TIFW) +
        (ContinentBonus * TICBW).

% smaller is better
island_value_index(T, Id, Player, ValueIndex) :- 
    island_value(T, Id, Player, Value),
    ValueIndex = 1000 - Value.
