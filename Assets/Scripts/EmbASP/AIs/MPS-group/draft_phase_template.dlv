%====ADDED CONSTANT===
continent_terr("n_america",9).
continent_terr("s_america",4).
continent_terr("africa",6).
continent_terr("europe",7).
continent_terr("asia",12).
continent_terr("australia",4).
%=====================
%continent(C, P).
%territory(N, C).
%connection(N1, N2).
%player(Player)
%turn(T, Player).
%territory_control(T, Territory, Player, Troops).
%troops_to_place(T, Player, Troops)

%=====GUESS================
curr_turn(T, P) :- T = #max{Turn : turn(Turn,_) }, turn(T,P), player(P).
troops(Z):- &int(1,Troops;Z), troops_to_place_card(T, Player, Troops), curr_turn(T,Player), Troops>0.
draft(T, Territory, N) | noDraft(T, Territory, N):- troops_to_place_card(T, Player, _), territory_control(T, Territory, Player, Troops), troops(N),curr_turn(T,Player).

%====HARD CONSTRAINS========
%Troops placed always as the troops available
:- #sum{Troops,Territory : draft(T,Territory,Troops)} = TotalTroops, troops_to_place_card(T,Player,AvailableTroops),curr_turn(T,Player), TotalTroops != AvailableTroops.
%Double place facts for the same Territory
:- draft(T, Territory, N1), draft(T, Territory, N2),curr_turn(T,_), N1!=N2.


%====CARDS DRAFT========
can_exchange(ExchangeId,Troops) :- 
    curr_turn(T,Player),
    possible_card_exchange(T, Player, ExchangeId, ExchangeTypeId, Card1, Card2, Card3, Troops),
    Troops >=6.
aux_can_exchange :- can_exchange(_,_).

max_exchange_troops(T,Player,MaxTroopsExchangeable) :- 
    curr_turn(T,Player),
    #max{Troops,ExchangeId : can_exchange(ExchangeId,Troops)} = MaxTroopsExchangeable.

exchange_cards(T,Player,ExchangeId) :- 
    curr_turn(T,Player),
    max_exchange_troops(T,Player,MaxTroopsExchangeable),
    can_exchange(ExchangeId,MaxTroopsExchangeable).

troops_to_place_card(T,Player,NewTroops) :- 
    troops_to_place(T,Player,OldTroops),
    exchange_cards(T,Player,ExchangeId), 
    can_exchange(ExchangeId,Troops),
    NewTroops = OldTroops + Troops.

troops_to_place_card(T,Player,Troops) :- 
    troops_to_place(T,Player,Troops),
    not aux_can_exchange. 

%====SUPPORT RULES=========


controlled_continent(Continent) :- 
    curr_turn(Turn,Myself), 
    continent_info(Continent, NumberOfTotalTerritories,_,_), 
    #count{OwnedTerritory : territory_control(Turn,OwnedTerritory, Myself, _),territory(OwnedTerritory, Continent)} = NumberOfOwnedTerritories,
    NumberOfOwnedTerritories == NumberOfTotalTerritories.

% ricavo i confini minacciati dei continenti che possiedi
threatened_border(PlayerTerritory,OpponentTerritory,TroopsDiff) :-
    controlled_continent(PlayerContinent),
    threatened_territory(PlayerTerritory,OpponentTerritory,TroopsDiff),
    territory(PlayerTerritory,PlayerContinent),
    territory(OpponentTerritory,OpponentContinent),
    PlayerContinent<>OpponentContinent.

%ausiliaria per vincolo debole
at_least_one_threat :- threatened_border(_,_,_).

% tutti i miei territori minacciati
threatened_territory(PlayerTerritory,OpponentTerritory,TroopsDiff) :-
    curr_turn(T,Player),
    territory_control(T,PlayerTerritory,Player,PlayerTroops), 
    territory_control(T,OpponentTerritory,Opponent,OpponentTroops), 
    connection(PlayerTerritory,OpponentTerritory),
    TroopsDiff >=0,
    TroopsDiff=OpponentTroops-PlayerTroops,
    Player!=Opponent.

% nome e continente di ogni territorio
territory_and_continent(Territory,Continent,Player) :- 
    territory_control(Turn,Territory,Player,Troops),
    territory(Territory, Continent),
    curr_turn(T,_).

% numero di territori conquistati per ogni continente
conquered_territories_for_continent(Continent,Num_Of_Conquered_Territories) :-
    continent(Continent,_),
    #count {Territory,Continent : territory_and_continent(Territory,Continent,Player), curr_turn(T,Player)}=Num_Of_Conquered_Territories.

% quando si controlla metà dei territori di un continente
attempt_continent_conquest(Continent) :- 
    continent_info(Continent,_,_,ConqRatio),
    not controlled_continent(Continent), 
    conquered_territories_for_continent(Continent,Num_Of_Conquered_Territories), 
    ConqRatio >= 50.

%un territorio minacciato che verrà riforzato COPRENDO LA DIFFERENZA DI TRUPPE
threatened_reinforced(Territory) :- 
    curr_turn(Turn,Player),
    threatened_border(Territory,_,TroopsDiff),
    draft(Turn,Territory,TroopsReinf),
    TroopsReinf = TroopsDiff + 1.

%tutti territori minacciati rinforzati COPRENDO LA DIFFERENZA DI TRUPPE
all_threatened_reinforced :- 
    #count{Territory : threatened_reinforced(Territory)} = TerritoryReinforced,
    #count{Territory : threatened_border(Territory,_,_)} = TerritoryThreatened,
    TerritoryReinforced = TerritoryThreatened.

%nuovo continent info
continent_info(Continent,NumberOfTotalTerr,TroopsBonus, ConqRatio) :- 
    curr_turn(Turn,Player),
    continent(Continent,TroopsBonus), 
    continent_terr(Continent,NumberOfTotalTerr),
    conquered_territories_for_continent(Continent,NumOfConqueredTerritories),
    ConqRatio = NumOfConqueredTerritories*100 / NumberOfTotalTerr.

% predicato ausiliario per vincolo debole
aux_threatened_border(Territory) :- 
    threatened_border(Territory,_,_).

% ogni volta che si rinforza un territorio non minacciato
reinforced_territory_not_threatened(Territory,Troops) :- 
    draft(_,Territory,Troops),
    not aux_threatened_border(Territory).

% regola ausiliaria per vincolo debole
reinforced_territory(Territory) :- 
    draft(_,Territory,_).

%territorio che è in un continente del quale si possiede almeno il 50%,
%che è connesso ad uno nemico è con il quale la differenza di truppe
%è di almeno una unità
fighting_territory(PlayerTerritory,Continent,TroopsDiff) :- 
    curr_turn(Turn,Player),
    territory_and_continent(PlayerTerritory,Continent,Player),
    attempt_continent_conquest(Continent),
    territory_and_continent(OpponentTerritory,Continent,OpponentPlayer),
    connection(PlayerTerritory,OpponentTerritory),
    Player != OpponentPlayer,
    threatened_territory(PlayerTerritory,OpponentTerritory,TroopsDiff).

%====WEAK CONSTRAINS========
%Minimizza il numero di territori bordi minacciati
:~ aux_threatened_border(Territory), not reinforced_territory(Territory). [1@2,Territory]
%Minimizza il numero di truppe posizionate su un territorio non threatened fino a quando non le hai rinforzate tutte
:~ reinforced_territory_not_threatened(Territory,Troops), not all_threatened_reinforced, at_least_one_threat. [Troops@2,Territory,Troops]

%Dato un continente occupato almeno a metà, voglio
%minimizzare il numero di territori che sono in quel continente, sono confinanti con territori nemici,
%hanno una differenza di truppe maggiore di zero(svantaggio) e non sono rinforzati
:~ fighting_territory(Territory,Continent,TroopsDiff), not reinforced_territory(Territory). [1@1,Territory,Continent]